# 下一代AI角色扮演聊天室 - 企业级配置
server:
  port: 8080
  servlet:
    context-path: /api/v2
  compression:
    enabled: true
    mime-types: application/json,application/xml,text/html,text/xml,text/plain,application/javascript,text/css
  http2:
    enabled: true

spring:
  application:
    name: ai-chat-backend
    version: 2.0.0
  
  profiles:
    active: dev
  
  # 数据库配置 - 支持多数据源
  datasource:
    primary:
      url: jdbc:h2:mem:aichat;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      driver-class-name: org.h2.Driver
      username: sa
      password: 
      hikari:
        maximum-pool-size: 20
        minimum-idle: 5
        connection-timeout: 30000
        idle-timeout: 600000
        max-lifetime: 1800000
    
    analytics:
      url: jdbc:h2:mem:analytics;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
      driver-class-name: org.h2.Driver
      username: sa
      password: 
  
  # JPA配置
  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.H2Dialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
        order_inserts: true
        order_updates: true
  
  # Redis配置
  data:
    redis:
      host: localhost
      port: 6379
      database: 0
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
          max-wait: -1ms
    
    # Elasticsearch配置
    elasticsearch:
      repositories:
        enabled: true
      uris: http://localhost:9200
  
  # 缓存配置
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=5m
    cache-names:
      - characters
      - conversations
      - users
      - ai-responses
  
  # WebSocket配置
  websocket:
    allowed-origins: "*"
    sockjs:
      enabled: true
    stomp:
      enabled: true
  
  # 安全配置
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/auth/realms/aichat
    
  # 消息队列配置
  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    virtual-host: /
    listener:
      simple:
        retry:
          enabled: true
          max-attempts: 3
  
  # 邮件配置
  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME:}
    password: ${MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

# AI服务配置
ai:
  providers:
    deepseek:
      api-key: ${DEEPSEEK_API_KEY:sk-test}
      base-url: https://api.deepseek.com/v1
      model: deepseek-chat
      max-tokens: 4000
      temperature: 0.7
      timeout: 30s
    
    openai:
      api-key: ${OPENAI_API_KEY:}
      base-url: https://api.openai.com/v1
      model: gpt-4-turbo-preview
      max-tokens: 4000
      temperature: 0.7
      timeout: 30s
  
  features:
    emotion-analysis: true
    personality-adaptation: true
    context-memory: true
    multi-modal: true
    voice-synthesis: true
    image-generation: true

# JWT配置
jwt:
  secret: ${JWT_SECRET:aichat-super-secret-key-for-jwt-token-generation-2024}
  expiration: 86400000 # 24小时
  refresh-expiration: 604800000 # 7天

# 文件上传配置
file:
  upload:
    max-size: 10MB
    allowed-types: image/jpeg,image/png,image/gif,audio/wav,audio/mp3,video/mp4
    storage-path: ${user.home}/aichat/uploads

# 监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,loggers,env,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5,0.9,0.95,0.99
  tracing:
    sampling:
      probability: 1.0

# API文档配置
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    enabled: true
    operations-sorter: method
    tags-sorter: alpha
  info:
    title: AI角色扮演聊天室 API
    description: 下一代AI驱动的角色扮演聊天平台
    version: 2.0.0
    contact:
      name: AI Chat Team
      email: support@aichat.com

# 日志配置
logging:
  level:
    com.aichat: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level [%logger{36}] - %msg%n"
  file:
    name: logs/aichat-backend.log
    max-size: 100MB
    max-history: 30

# 自定义配置
app:
  name: AI角色扮演聊天室
  version: 2.0.0
  description: 下一代AI驱动的角色扮演聊天平台
  
  # 业务配置
  business:
    max-conversations-per-user: 100
    max-message-length: 2000
    conversation-timeout: 30m
    character-limit-per-user: 50
    
  # 性能配置
  performance:
    async-pool-size: 10
    cache-ttl: 300s
    rate-limit:
      requests-per-minute: 60
      burst-capacity: 10
  
  # 安全配置
  security:
    cors:
      allowed-origins: 
        - http://localhost:5173
        - http://localhost:3000
        - https://aichat.com
      allowed-methods: GET,POST,PUT,DELETE,OPTIONS
      allowed-headers: "*"
      allow-credentials: true
    
    rate-limiting:
      enabled: true
      requests-per-minute: 100
    
    encryption:
      algorithm: AES-256-GCM
      key-size: 256

---
# 开发环境配置
spring:
  config:
    activate:
      on-profile: dev
  
  h2:
    console:
      enabled: true
      path: /h2-console
  
  jpa:
    show-sql: true

logging:
  level:
    root: INFO
    com.aichat: DEBUG

---
# 生产环境配置
spring:
  config:
    activate:
      on-profile: prod
  
  datasource:
    primary:
      url: jdbc:postgresql://localhost:5432/aichat
      driver-class-name: org.postgresql.Driver
      username: ${DB_USERNAME:aichat}
      password: ${DB_PASSWORD:password}
  
  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false

logging:
  level:
    root: WARN
    com.aichat: INFO

---
# Docker环境配置
spring:
  config:
    activate:
      on-profile: docker
  
  datasource:
    primary:
      url: jdbc:postgresql://postgres:5432/aichat
      driver-class-name: org.postgresql.Driver
      username: ${DB_USERNAME:aichat}
      password: ${DB_PASSWORD:password}
  
  data:
    redis:
      host: redis
      port: 6379
  
  rabbitmq:
    host: rabbitmq
    port: 5672